{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar USER_ID_KEY = '@IoTLights:userId';\nexport var saveUserId = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      yield AsyncStorage.setItem(USER_ID_KEY, userId);\n    } catch (error) {\n      console.error('Error saving user ID:', error);\n      throw error;\n    }\n  });\n  return function saveUserId(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getUserId = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      return yield AsyncStorage.getItem(USER_ID_KEY);\n    } catch (error) {\n      console.error('Error retrieving user ID:', error);\n      return null;\n    }\n  });\n  return function getUserId() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var removeUserId = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    try {\n      yield AsyncStorage.removeItem(USER_ID_KEY);\n    } catch (error) {\n      console.error('Error removing user ID:', error);\n      throw error;\n    }\n  });\n  return function removeUserId() {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","USER_ID_KEY","saveUserId","_ref","_asyncToGenerator","userId","setItem","error","console","_x","apply","arguments","getUserId","_ref2","getItem","removeUserId","_ref3","removeItem"],"sources":["/home/runner/workspace/src/utils/storage.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Key for storing the user ID in AsyncStorage\nconst USER_ID_KEY = '@IoTLights:userId';\n\n/**\n * Save the user ID to AsyncStorage\n * @param {string} userId - The user ID to save\n * @returns {Promise<void>}\n */\nexport const saveUserId = async (userId) => {\n  try {\n    await AsyncStorage.setItem(USER_ID_KEY, userId);\n  } catch (error) {\n    console.error('Error saving user ID:', error);\n    throw error;\n  }\n};\n\n/**\n * Retrieve the user ID from AsyncStorage\n * @returns {Promise<string|null>} - The user ID or null if not found\n */\nexport const getUserId = async () => {\n  try {\n    return await AsyncStorage.getItem(USER_ID_KEY);\n  } catch (error) {\n    console.error('Error retrieving user ID:', error);\n    return null;\n  }\n};\n\n/**\n * Remove the user ID from AsyncStorage\n * @returns {Promise<void>}\n */\nexport const removeUserId = async () => {\n  try {\n    await AsyncStorage.removeItem(USER_ID_KEY);\n  } catch (error) {\n    console.error('Error removing user ID:', error);\n    throw error;\n  }\n};\n"],"mappings":";AAAA,OAAOA,YAAY,MAAM,2CAA2C;AAGpE,IAAMC,WAAW,GAAG,mBAAmB;AAOvC,OAAO,IAAMC,UAAU;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,MAAM,EAAK;IAC1C,IAAI;MACF,MAAML,YAAY,CAACM,OAAO,CAACL,WAAW,EAAEI,MAAM,CAAC;IACjD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAPYL,UAAUA,CAAAO,EAAA;IAAA,OAAAN,IAAA,CAAAO,KAAA,OAAAC,SAAA;EAAA;AAAA,GAOtB;AAMD,OAAO,IAAMC,SAAS;EAAA,IAAAC,KAAA,GAAAT,iBAAA,CAAG,aAAY;IACnC,IAAI;MACF,aAAaJ,YAAY,CAACc,OAAO,CAACb,WAAW,CAAC;IAChD,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,IAAI;IACb;EACF,CAAC;EAAA,gBAPYK,SAASA,CAAA;IAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAOrB;AAMD,OAAO,IAAMI,YAAY;EAAA,IAAAC,KAAA,GAAAZ,iBAAA,CAAG,aAAY;IACtC,IAAI;MACF,MAAMJ,YAAY,CAACiB,UAAU,CAAChB,WAAW,CAAC;IAC5C,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAPYQ,YAAYA,CAAA;IAAA,OAAAC,KAAA,CAAAN,KAAA,OAAAC,SAAA;EAAA;AAAA,GAOxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}