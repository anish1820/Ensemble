{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { API } from 'aws-amplify';\nexport var getRecommendations = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    try {\n      var campaignArn = process.env.PERSONALIZE_CAMPAIGN_ARN || 'arn:aws:personalize:us-east-1:123456789012:campaign/iot-lights-campaign';\n      var params = {\n        campaignArn: campaignArn,\n        userId: userId,\n        numResults: 1\n      };\n      var response = yield API.post('personalizeApi', '/recommendations', {\n        body: params,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error fetching recommendations:', error);\n      throw error;\n    }\n  });\n  return function getRecommendations(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var formatItemId = function formatItemId(brightness, cct, dimmer) {\n  return `brightness:${brightness}|cct:${cct}|dimmer:${dimmer}`;\n};\nexport var sendUserFeedback = function () {\n  var _ref2 = _asyncToGenerator(function* (userId, itemId) {\n    try {\n      var eventTrackerArn = process.env.PERSONALIZE_EVENT_TRACKER_ARN || 'arn:aws:personalize:us-east-1:123456789012:event-tracker/iot-lights-event-tracker';\n      var params = {\n        trackingId: eventTrackerArn.split('/').pop(),\n        userId: userId,\n        sessionId: `session-${Date.now()}`,\n        eventList: [{\n          eventType: 'SETTING_ADJUSTED',\n          sentAt: Math.floor(Date.now() / 1000),\n          itemId: itemId,\n          properties: JSON.stringify({\n            event: 'SETTING_ADJUSTED',\n            source: 'mobile_app'\n          })\n        }]\n      };\n      var response = yield API.post('personalizeApi', '/events', {\n        body: params,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Error sending user feedback:', error);\n      throw error;\n    }\n  });\n  return function sendUserFeedback(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["API","getRecommendations","_ref","_asyncToGenerator","userId","campaignArn","process","env","PERSONALIZE_CAMPAIGN_ARN","params","numResults","response","post","body","headers","error","console","_x","apply","arguments","formatItemId","brightness","cct","dimmer","sendUserFeedback","_ref2","itemId","eventTrackerArn","PERSONALIZE_EVENT_TRACKER_ARN","trackingId","split","pop","sessionId","Date","now","eventList","eventType","sentAt","Math","floor","properties","JSON","stringify","event","source","_x2","_x3"],"sources":["/home/runner/workspace/src/services/personalize.js"],"sourcesContent":["import { API } from 'aws-amplify';\n\n/**\n * Fetch personalized recommendations from AWS Personalize\n * @param {string} userId - The unique identifier for the user\n * @returns {Promise<Object>} - The recommendations response\n */\nexport const getRecommendations = async (userId) => {\n  try {\n    // Campaign ARN should be configured in your environment\n    const campaignArn = process.env.PERSONALIZE_CAMPAIGN_ARN || \n      'arn:aws:personalize:us-east-1:123456789012:campaign/iot-lights-campaign';\n\n    const params = {\n      campaignArn,\n      userId,\n      numResults: 1\n    };\n\n    // Call AWS Personalize API\n    const response = await API.post('personalizeApi', '/recommendations', {\n      body: params,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n\n    return response;\n  } catch (error) {\n    console.error('Error fetching recommendations:', error);\n    throw error;\n  }\n};\n\n/**\n * Format the item ID based on light settings\n * @param {number} brightness - The brightness level (0-100)\n * @param {number} cct - The color temperature (2700-6500K)\n * @param {number} dimmer - The dimmer rate (0-100)\n * @returns {string} - Formatted item ID\n */\nexport const formatItemId = (brightness, cct, dimmer) => {\n  return `brightness:${brightness}|cct:${cct}|dimmer:${dimmer}`;\n};\n\n/**\n * Send user feedback to AWS Personalize Event Tracker\n * @param {string} userId - The user ID\n * @param {string} itemId - The formatted item ID representing the settings\n * @returns {Promise<Object>} - The response from the event tracker\n */\nexport const sendUserFeedback = async (userId, itemId) => {\n  try {\n    // Event Tracker ARN should be configured in your environment\n    const eventTrackerArn = process.env.PERSONALIZE_EVENT_TRACKER_ARN || \n      'arn:aws:personalize:us-east-1:123456789012:event-tracker/iot-lights-event-tracker';\n\n    const params = {\n      trackingId: eventTrackerArn.split('/').pop(),\n      userId,\n      sessionId: `session-${Date.now()}`,\n      eventList: [\n        {\n          eventType: 'SETTING_ADJUSTED',\n          sentAt: Math.floor(Date.now() / 1000), // Unix timestamp in seconds\n          itemId,\n          properties: JSON.stringify({\n            event: 'SETTING_ADJUSTED',\n            source: 'mobile_app',\n          }),\n        },\n      ],\n    };\n\n    // Call AWS Personalize Event Tracker API\n    const response = await API.post('personalizeApi', '/events', {\n      body: params,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n\n    return response;\n  } catch (error) {\n    console.error('Error sending user feedback:', error);\n    throw error;\n  }\n};\n"],"mappings":";AAAA,SAASA,GAAG,QAAQ,aAAa;AAOjC,OAAO,IAAMC,kBAAkB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,MAAM,EAAK;IAClD,IAAI;MAEF,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IACtD,yEAAyE;MAE3E,IAAMC,MAAM,GAAG;QACbJ,WAAW,EAAXA,WAAW;QACXD,MAAM,EAANA,MAAM;QACNM,UAAU,EAAE;MACd,CAAC;MAGD,IAAMC,QAAQ,SAASX,GAAG,CAACY,IAAI,CAAC,gBAAgB,EAAE,kBAAkB,EAAE;QACpEC,IAAI,EAAEJ,MAAM;QACZK,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,OAAOH,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAzBYd,kBAAkBA,CAAAgB,EAAA;IAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAyB9B;AASD,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAK;EACvD,OAAO,cAAcF,UAAU,QAAQC,GAAG,WAAWC,MAAM,EAAE;AAC/D,CAAC;AAQD,OAAO,IAAMC,gBAAgB;EAAA,IAAAC,KAAA,GAAAtB,iBAAA,CAAG,WAAOC,MAAM,EAAEsB,MAAM,EAAK;IACxD,IAAI;MAEF,IAAMC,eAAe,GAAGrB,OAAO,CAACC,GAAG,CAACqB,6BAA6B,IAC/D,mFAAmF;MAErF,IAAMnB,MAAM,GAAG;QACboB,UAAU,EAAEF,eAAe,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;QAC5C3B,MAAM,EAANA,MAAM;QACN4B,SAAS,EAAE,WAAWC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAClCC,SAAS,EAAE,CACT;UACEC,SAAS,EAAE,kBAAkB;UAC7BC,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACN,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;UACrCR,MAAM,EAANA,MAAM;UACNc,UAAU,EAAEC,IAAI,CAACC,SAAS,CAAC;YACzBC,KAAK,EAAE,kBAAkB;YACzBC,MAAM,EAAE;UACV,CAAC;QACH,CAAC;MAEL,CAAC;MAGD,IAAMjC,QAAQ,SAASX,GAAG,CAACY,IAAI,CAAC,gBAAgB,EAAE,SAAS,EAAE;QAC3DC,IAAI,EAAEJ,MAAM;QACZK,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,OAAOH,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBApCYS,gBAAgBA,CAAAqB,GAAA,EAAAC,GAAA;IAAA,OAAArB,KAAA,CAAAP,KAAA,OAAAC,SAAA;EAAA;AAAA,GAoC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}